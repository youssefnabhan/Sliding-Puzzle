{"version":3,"sources":["Models/board.js","components/EmptyBlock.jsx","components/Block.jsx","components/BoardGame.jsx","App.js","index.js"],"names":["EmptyBlock","style","width","height","display","fontSize","padding","border","backgroundColor","color","backgroundSize","board","number","i","push","emptyIndex","getNeighbours","j","neighbours","neighbourIndex","movable","includes","swap","newArray","length","slice","shuffle","random","Math","floor","Block","num","row","ceil","dim1","dim2","useState","backgroundImage","backgroundPosition","setStyle","onMouseOver","onMouseLeave","onClick","BoardGame","row1","row2","row3","row4","gameBoard","blockNumbers","ohYeah","order","win","console","log","map","index","flexDirection","alignItems","justifyContent","App","setBoard","Container","Row","newBoard","Button","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eea2a51a.chunk.js","sourcesContent":["\nvar board = []\n\nvar number = 1\nfor (var i = 0; i<4 ;i++){\n    board.push([number++,number++,number++,number++])\n}\n\nvar emptyIndex = [3,3]\n\nconst getNeighbours = (i,j) => {\n    const neighbours = []\n    const neighbourIndex = []\n    if(!(i===0)){ //up available\n        neighbours.push(board[i-1][j])\n        neighbourIndex.push([i-1,j])\n    }\n    if(!(i===3)){ //down available\n        neighbours.push(board[i+1][j])\n        neighbourIndex.push([i+1,j])\n    }\n    if(!(j===0)){ //left available\n        neighbours.push(board[i][j-1])\n        neighbourIndex.push([i,j-1])\n    }\n    if (!(j===3)){ //right available\n        neighbours.push(board[i][j+1])\n        neighbourIndex.push([i,j+1])\n    }\n    \n    return {neighbours,neighbourIndex}\n}\n\n\nconst movable =  (i,j) => {\n    const {neighbours} = getNeighbours(i,j)\n    return neighbours.includes(16)\n}\n\n\nconst swap = (i,j) => {\n    if(movable(i,j)){\n        board[emptyIndex[0]][emptyIndex[1]] = board[i][j]\n        board[i][j] = 16\n        emptyIndex=[i,j]\n             \n    }\n    \n    var newArray = [];\n\n    for ( i = 0; i < board.length; i++)\n    newArray[i] = board[i].slice();\n\n\n    return newArray\n    \n}\nconst shuffle = () => {\n    for(var i = 0; i<1000;i++){\n        const {neighbourIndex}  = getNeighbours(emptyIndex[0],emptyIndex[1])\n        const random = Math.floor(Math.random() * neighbourIndex.length)\n        swap(neighbourIndex[random][0],neighbourIndex[random][1])\n    }\n    var newArray = [];\n\n    for ( i = 0; i < board.length; i++)\n    newArray[i] = board[i].slice();\n\n    return newArray\n\n    \n}\nshuffle()\n\n\n\n\nexport default {board,getNeighbours,movable,swap,shuffle}\n\n\n","\nconst EmptyBlock = () => {\n    const style = {\n        width:\"90px\",\n        height:\"90px\",\n        display:\"inline-block\",\n        fontSize:\"xx-large\",\n        padding:\"0\",\n        border:\"solid black 2px\",\n        backgroundColor:\"grey\",\n        color:\"grey\",\n        backgroundSize:\"400px 400px\",\n        \n        \n    }\n\n    return (\n        <div style={style}>\n            X\n        </div>\n    )\n}\n\nexport default EmptyBlock\n","import React, { useState } from 'react'\nimport EmptyBlock from './EmptyBlock'\nimport board from '../Models/board'\n\n\nconst Block = ({num,swap,i,j}) => {\n    const row = Math.ceil(num / 4)\n    const col = num % 4 ? num % 4 : 4\n    const dim1 = (col-1) * -100\n    const dim2 = (row-1) * -100\n    const [style,setStyle] = useState(\n        {\n            width:\"90px\",\n            height:\"90px\",\n            display:\"inline-block\",\n            fontSize:\"xx-large\",\n            padding:\"0\",\n            border:\"solid black 2px\",\n            backgroundImage:\"url('./image.jpg')\",\n            color:\"black\",\n            backgroundSize:\"400px 400px\",\n            backgroundPosition:`${dim1}px ${dim2}px`\n        }\n    )\n    if(num === 16) {\n        return (<EmptyBlock/>)\n    }\n\n   \n\n    \n    \n    const hover = () => {\n        if(board.movable(i,j))\n        setStyle({\n            width:\"90px\",\n            height:\"90px\",\n            display:\"inline-block\",\n            fontSize:\"xx-large\",\n            padding:\"0\",\n            border:\"solid red 2px\",\n            backgroundImage:\"url('./image.jpg')\",\n            color:\"red\",\n            backgroundSize:\"400px 400px\",\n            backgroundPosition:`${dim1}px ${dim2}px`\n        })\n    }\n    const leave = () => {\n        setStyle({\n            width:\"90px\",\n            height:\"90px\",\n            display:\"inline-block\",\n            fontSize:\"xx-large\",\n            padding:\"0\",\n            border:\"solid black 2px\",\n            backgroundImage:\"url('./image.jpg')\",\n            color:\"black\",\n            backgroundSize:\"400px 400px\",\n            backgroundPosition:`${dim1}px ${dim2}px`\n        })\n    }\n\n    const swapper = () => {\n        swap(i,j)\n        \n    }\n    return (\n        <div style={style} onMouseOver={hover} onMouseLeave={leave} onClick={swapper} >\n            {num}\n        \n        </div>\n    )\n    \n\n}\n\nconst getRand = () => Math.floor(Math.random() * 5) * 10\n\n\nexport default Block\n","import Block from \"./Block\"\nimport board from '../Models/board'\nimport { useState } from \"react\"\n\n\nconst BoardGame = ({gameBoard,swap}) => {\n   \n    \n    \n    let row1,row2,row3,row4\n    [row1,row2,row3,row4] = gameBoard\n    const blockNumbers  = [...row1,...row2,...row3,...row4]\n    const win = () => {\n        const order = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n        for(var i = 0;i< 16;i++){\n            if (blockNumbers[i] != order[i]){\n                return false\n            }\n        }\n        return true\n    }\n    const ohYeah = win()\n    console.log(ohYeah)\n    if(ohYeah){\n        return (<h1>You Win!</h1>)\n    }\n    else{\n        return  (\n            \n            <div style={style} >\n                \n                {blockNumbers.map((number,index)=> <Block key={number} swap={swap} i={Math.ceil((index+1)/4)-1} j={ (index+1)%4 ? (index+1)%4 -1 : 3 } num={number}/>\n\n                \n                )}   \n            </div>\n\n//{blockNumbers.map((number,index)=> <Block />)}\n\n                \n)}\n            \n        \n    }\n\n\nconst style = {\n    display:\"inline\",\n    width:\"400px\",\n    height:\"400px\"\n}\nexport default BoardGame\n","import {Container,Row,Button} from 'react-bootstrap'\nimport BoardGame from './components/BoardGame'\nimport board from './Models/board';\nimport { useState } from 'react';\n\nfunction App() {\n  \n  const [gameBoard,setBoard] = useState(board.board)\n    \n  const swap = (i,j) => {\n  \n      const newBoard = board.swap(i,j)\n      \n      setBoard(newBoard)\n    \n  }\n  const shuffle = () => {\n    const newBoard = board.shuffle()\n    setBoard(newBoard)\n  }\n\n\n\n  return (\n    <div>\n      <Container style={style}>\n        \n        <Row>\n          <BoardGame gameBoard={gameBoard} swap={swap}/>\n        </Row>\n        <Row style={{padding:\"5vh\"}}>\n          <Button onClick={shuffle}>Shuffle</Button>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nconst style = {\n  display:\"flex\",\n  flexDirection:\"column\",\n  alignItems:\"center\",\n  justifyContent:'center',\n  height:\"100vh\"\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}